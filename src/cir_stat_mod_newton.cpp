// [[Rcpp::depends("RcppArmadillo")]]
#include <RcppArmadillo.h>
using namespace Rcpp;
using namespace arma;

double start = 0.001;
double end = 0.25;
double by = 0.001;
arma::vec alpha_grid = arma::linspace(start, end, ((end-start)/by)+1);

//[[Rcpp::export]]
arma::vec get_alpha(){
  return(alpha_grid);
}

//                                                           //
//            Modification of circular statistics            //
//                                                           //

//[[Rcpp::export]]
double cir_stat_Kuiper_mod(double statistic, int n, double alpha, 
                           bool KS = false, bool Stephens = false){
  
  double f;
  
  if (Stephens){
    if (KS){
      f = (1 + 0.12/sqrt(n) + 0.11/n);
    }else{
      f = (1 + 0.155/sqrt(n) + 0.24/n);
    }
  }else{
    if (KS){
      f = (1 + 0.1575/sqrt(n) + 0.0192/(n*sqrt(alpha)) - 0.0051/sqrt(alpha*n));
    }else{
      f = (1 + 0.2330/sqrt(n) + 0.0276/(n*sqrt(alpha)) - 0.0068/sqrt(alpha*n));
    }  
  }
  
  return(statistic * f);
  
}

//[[Rcpp::export]]
double cir_stat_Watson_mod(double statistic, int n, double alpha, 
                           bool CvM = false, bool Stephens = false){
  
  double f;
  
  if (Stephens){
    if (CvM){
      statistic += -0.4/n +0.6/(n*n);
      f = (1 + 1/n);
    }else{
      statistic += -0.1/n +0.1/(n*n);
      f = (1 + 0.8/n);
    }
  }else{
    if (CvM){
      f = (1 - 0.1651/n + 0.0749/(n*sqrt(alpha)) - 0.0014/(n*alpha));
    }else{
      f = (1 - 0.1505/n + 0.0917/(n*sqrt(alpha)) - 0.0018/(n*alpha));
    }
  }
  
  return(statistic * f);
  
}

//[[Rcpp::export]]
double cir_stat_AD_mod(double statistic, int n, double alpha, 
                       bool Stephens = false){
  
  double f;
  
  if (Stephens){
    f = 1;
  }else{
    f = (1 + 0.036/n - 0.0234/(n*sqrt(alpha)) + 0.0006/(n*alpha));
  }
  
  return(statistic * f);
  
}

//                                                           //
//       Asymptotic quantiles of circular statistics         //
//                                                           //

NumericVector KS_asymp_q = {1.9495, 1.8585, 1.8031, 1.7628, 1.7309, 1.7043, 1.6816, 1.6616, 1.6438, 
                            1.6277, 1.613, 1.5994, 1.5869, 1.5751, 1.5642, 1.5538, 1.544, 1.5347, 
                            1.5259, 1.5175, 1.5094, 1.5017, 1.4943, 1.4871, 1.4803, 1.4736, 1.4672, 
                            1.461, 1.455, 1.4491, 1.4435, 1.438, 1.4326, 1.4274, 1.4223, 1.4173, 
                            1.4125, 1.4078, 1.4031, 1.3986, 1.3942, 1.3899, 1.3856, 1.3815, 1.3774, 
                            1.3734, 1.3695, 1.3656, 1.3619, 1.3581, 1.3545, 1.3509, 1.3474, 1.3439, 
                            1.3405, 1.3371, 1.3338, 1.3305, 1.3273, 1.3242, 1.321, 1.318, 1.3149, 
                            1.3119, 1.309, 1.306, 1.3032, 1.3003, 1.2975, 1.2947, 1.292, 1.2893, 
                            1.2866, 1.2839, 1.2813, 1.2787, 1.2762, 1.2737, 1.2712, 1.2687, 1.2662, 
                            1.2638, 1.2614, 1.259, 1.2567, 1.2543, 1.252, 1.2497, 1.2475, 1.2452, 
                            1.243, 1.2408, 1.2386, 1.2365, 1.2343, 1.2322, 1.2301, 1.228, 1.2259, 
                            1.2239, 1.2219, 1.2198, 1.2178, 1.2159, 1.2139, 1.2119, 1.21, 1.2081, 
                            1.2062, 1.2043, 1.2024, 1.2005, 1.1987, 1.1968, 1.195, 1.1932, 1.1914, 
                            1.1896, 1.1878, 1.1861, 1.1843, 1.1826, 1.1808, 1.1791, 1.1774, 1.1757, 
                            1.174, 1.1724, 1.1707, 1.169, 1.1674, 1.1658, 1.1642, 1.1625, 1.1609, 
                            1.1593, 1.1578, 1.1562, 1.1546, 1.1531, 1.1515, 1.15, 1.1485, 1.1469, 
                            1.1454, 1.1439, 1.1424, 1.1409, 1.1395, 1.138, 1.1365, 1.1351, 1.1336, 
                            1.1322, 1.1308, 1.1293, 1.1279, 1.1265, 1.1251, 1.1237, 1.1223, 1.1209, 
                            1.1196, 1.1182, 1.1168, 1.1155, 1.1141, 1.1128, 1.1114, 1.1101, 1.1088, 
                            1.1075, 1.1062, 1.1049, 1.1036, 1.1023, 1.101, 1.0997, 1.0984, 1.0971, 
                            1.0959, 1.0946, 1.0934, 1.0921, 1.0909, 1.0896, 1.0884, 1.0872, 1.0859, 
                            1.0847, 1.0835, 1.0823, 1.0811, 1.0799, 1.0787, 1.0775, 1.0763, 1.0751, 
                            1.074, 1.0728, 1.0716, 1.0705, 1.0693, 1.0682, 1.067, 1.0659, 1.0647, 
                            1.0636, 1.0625, 1.0613, 1.0602, 1.0591, 1.058, 1.0569, 1.0558, 1.0546, 
                            1.0535, 1.0525, 1.0514, 1.0503, 1.0492, 1.0481, 1.047, 1.046, 1.0449, 
                            1.0438, 1.0428, 1.0417, 1.0406, 1.0396, 1.0385, 1.0375, 1.0365, 1.0354, 
                            1.0344, 1.0334, 1.0323, 1.0313, 1.0303, 1.0293, 1.0282, 1.0272, 1.0262, 
                            1.0252, 1.0242, 1.0232, 1.0222, 1.0212, 1.0202, 1.0192};

NumericVector CvM_asymp_q = {1.167869, 1.03846, 0.9633351, 0.9103154, 0.8693864, 0.8360821, 
                             0.8080174, 0.7837828, 0.7624706, 0.7434891, 0.7262938, 0.7106819, 
                             0.6963499, 0.6831086, 0.6708072, 0.6593525, 0.6485588, 0.6384363, 
                             0.6288909, 0.6197956, 0.6112114, 0.6030277, 0.5952203, 0.5877707, 
                             0.5806214, 0.5737654, 0.5671797, 0.5608443, 0.5547412, 0.5488543, 
                             0.5431421, 0.5376563, 0.5323439, 0.5271954, 0.5222018, 0.5173548, 
                             0.5126467, 0.5080701, 0.5036184, 0.4992852, 0.4950577, 0.4909746, 
                             0.4869476, 0.4830278, 0.4792077, 0.4754568, 0.471827, 0.4682607, 
                             0.464771, 0.4613538, 0.4580049, 0.4547201, 0.4515563, 0.4484017, 
                             0.445322, 0.4423021, 0.4393398, 0.4364336, 0.4335817, 0.4307826, 
                             0.4280349, 0.4252765, 0.4226228, 0.4200009, 0.4174821, 0.4149427, 
                             0.4124424, 0.4099876, 0.4075772, 0.4052044, 0.4028679, 0.4005669,
                             0.3983004, 0.3960669, 0.3938653, 0.3916953, 0.3895561, 0.3874467, 
                             0.3853665, 0.3833147, 0.3812906, 0.3792935, 0.3773227, 0.3753777, 
                             0.3734577, 0.3715622, 0.3696907, 0.3678424, 0.3660171, 0.364214, 
                             0.3624327, 0.3606728, 0.3589337, 0.357215, 0.3555163, 0.3538371, 
                             0.352177, 0.3505357, 0.3489127, 0.3473077, 0.3457203, 0.3441502, 
                             0.3425969, 0.3410603, 0.3395399, 0.3380354, 0.3365466, 0.3350731, 
                             0.3336147, 0.3321711, 0.3307419, 0.329324, 0.3279232, 0.3265362, 
                             0.3251626, 0.3238023, 0.3224549, 0.3211204, 0.3197984, 0.3184887, 
                             0.3171912, 0.3159057, 0.3146319, 0.3133696, 0.3121186, 0.3108789, 
                             0.3096501, 0.3084321, 0.3072248, 0.306028, 0.3048414, 0.303665, 
                             0.3024986, 0.3013421, 0.3001952, 0.2990579, 0.2979299, 0.2968113, 
                             0.2957017, 0.2945745, 0.2934823, 0.2923989, 0.2913241, 0.2902577, 
                             0.2891997, 0.28815, 0.2871083, 0.2861357, 0.28511, 0.2840921, 
                             0.2830818, 0.2820791, 0.2810839, 0.2800829, 0.2791023, 0.278129, 
                             0.2771627, 0.2762035, 0.2752512, 0.2743058, 0.2733671, 0.272435, 
                             0.2715095, 0.2705906, 0.269678, 0.2687718, 0.2678718, 0.266978, 
                             0.2660903, 0.2652087, 0.2643329, 0.2634631, 0.2625991, 0.2617408, 
                             0.2608882, 0.2600413, 0.2591998, 0.2583639, 0.2575333, 0.2567081, 
                             0.2558882, 0.2550735, 0.254264, 0.2534596, 0.2526602, 0.2518659, 
                             0.2510765, 0.250292, 0.2495123, 0.2487374, 0.2479672, 0.2472017, 
                             0.2464408, 0.2456845, 0.2449327, 0.2441854, 0.2434426, 0.2427041, 
                             0.24197, 0.2412401, 0.2405145, 0.2397931, 0.2390759, 0.2383628,
                             0.2376537, 0.2369487, 0.2362477, 0.2355507, 0.2348575, 0.2341683, 
                             0.2334828, 0.2328012, 0.2321252, 0.2314533, 0.2307851, 0.2301204, 
                             0.2294593, 0.2288017, 0.2281476, 0.227497, 0.2268497, 0.2262058, 
                             0.2255653, 0.2249281, 0.2242943, 0.2236636, 0.2230362, 0.2224121, 
                             0.22173, 0.2211122, 0.2204974, 0.2198858, 0.2192772, 0.2186717, 
                             0.2180692, 0.2174697, 0.2168731, 0.2162795, 0.2156888, 0.2151009, 
                             0.214516, 0.2139339, 0.2133546, 0.2127781, 0.2122043, 0.2116333, 
                             0.2110651, 0.2104995, 0.2099366, 0.2093764};

NumericVector AD_asymp_q = {5.967069, 5.328112, 4.958501, 4.698094, 4.497067, 4.333465, 4.195636, 
                            4.076558, 3.971805, 3.878357, 3.794021, 3.717207, 3.646703, 3.581565, 
                            3.521054, 3.46455, 3.411635, 3.36179, 3.314751, 3.270212, 3.227926, 
                            3.187684, 3.149302, 3.11262, 3.0775, 3.043817, 3.011462, 2.980339, 
                            2.950358, 2.921443, 2.893523, 2.866534, 2.840418, 2.815122, 2.790599, 
                            2.766804, 2.743697, 2.721241, 2.699401, 2.678147, 2.657447, 2.637276, 
                            2.617608, 2.598421, 2.579699, 2.561414, 2.543545, 2.526076, 2.508928, 
                            2.492209, 2.475842, 2.459813, 2.44411, 2.428719, 2.41363, 2.398831, 
                            2.384311, 2.370061, 2.356072, 2.342334, 2.328839, 2.315579, 2.302546, 
                            2.289733, 2.277132, 2.264739, 2.252539, 2.240528, 2.228761, 2.217112, 
                            2.205649, 2.194368, 2.183255, 2.172304, 2.161511, 2.150871, 2.140382, 
                            2.130037, 2.119835, 2.109771, 2.099841, 2.090042, 2.080371, 2.070825, 
                            2.061401, 2.052095, 2.042905, 2.033828, 2.024861, 2.016002, 2.007249, 
                            1.998606, 1.990086, 1.981664, 1.973336, 1.965102, 1.956959, 1.948906, 
                            1.940941, 1.933062, 1.925267, 1.917556, 1.909926, 1.902375, 1.894903, 
                            1.887508, 1.880188, 1.872942, 1.865769, 1.858667, 1.851636, 1.844673, 
                            1.837778, 1.830949, 1.824185, 1.817486, 1.81085, 1.804275, 1.797761, 
                            1.791308, 1.784913, 1.778575, 1.772295, 1.766071, 1.759901, 1.753786, 
                            1.747724, 1.741715, 1.735757, 1.72985, 1.723993, 1.718185, 1.712425, 
                            1.706713, 1.701048, 1.69543, 1.689857, 1.684328, 1.678844, 1.673404, 
                            1.668006, 1.662651, 1.657337, 1.652065, 1.646833, 1.64164, 1.636488, 
                            1.631374, 1.626284, 1.621246, 1.616244, 1.61128, 1.606351, 1.601457, 
                            1.596599, 1.591775, 1.586985, 1.582229, 1.577506, 1.572816, 1.568158, 
                            1.563532, 1.558938, 1.554375, 1.549904, 1.545403, 1.540931, 1.53649, 
                            1.532077, 1.527694, 1.523339, 1.519013, 1.514714, 1.510443, 1.5062, 
                            1.501987, 1.4978, 1.493639, 1.489505, 1.485396, 1.481313, 1.477255, 
                            1.473221, 1.469213, 1.465228, 1.461268, 1.457331, 1.453418, 1.449528, 
                            1.445661, 1.441816, 1.437994, 1.434194, 1.430417, 1.426661, 1.422926, 
                            1.419213, 1.415521, 1.411849, 1.408198, 1.404568, 1.400958, 1.397367, 
                            1.393797, 1.390246, 1.386714, 1.383201, 1.379708, 1.376233, 1.372777, 
                            1.369339, 1.365919, 1.362518, 1.359134, 1.355768, 1.352419, 1.349088, 
                            1.345774, 1.342476, 1.339196, 1.335933, 1.332685, 1.329455, 1.32624, 
                            1.323041, 1.319859, 1.316692, 1.313541, 1.310405, 1.307283, 1.304177, 
                            1.301087, 1.298011, 1.29495, 1.291904, 1.288872, 1.285855, 1.282852, 
                            1.279863, 1.276887, 1.273926, 1.270978, 1.268044, 1.265124, 1.262217, 
                            1.259323, 1.256442, 1.253574, 1.25072, 1.247878};

NumericVector Kuiper_asymp_q = {2.303, 2.2175, 2.1656, 2.1277, 2.0978, 2.0729, 2.0515, 2.0328, 
                                2.0161, 2.001, 1.9872, 1.9744, 1.9627, 1.9517, 1.9413, 1.9316, 
                                1.9224, 1.9137, 1.9054, 1.8975, 1.8899, 1.8826, 1.8757, 1.8689, 
                                1.8625, 1.8562, 1.8502, 1.8443, 1.8387, 1.8332, 1.8278, 1.8226, 
                                1.8176, 1.8127, 1.8079, 1.8032, 1.7986, 1.7942, 1.7898, 1.7855, 
                                1.7814, 1.7773, 1.7733, 1.7694, 1.7655, 1.7617, 1.758, 1.7544, 
                                1.7508, 1.7473, 1.7438, 1.7405, 1.7371, 1.7338, 1.7306, 1.7274, 
                                1.7243, 1.7212, 1.7181, 1.7151, 1.7121, 1.7092, 1.7063, 1.7035,
                                1.7007, 1.6979, 1.6952, 1.6925, 1.6898, 1.6872, 1.6846, 1.682, 
                                1.6794, 1.6769, 1.6744, 1.672, 1.6695, 1.6671, 1.6647, 1.6624, 
                                1.6601, 1.6577, 1.6555, 1.6532, 1.6509, 1.6487, 1.6465, 1.6443, 
                                1.6422, 1.64, 1.6379, 1.6358, 1.6337, 1.6317, 1.6296, 1.6276, 
                                1.6256, 1.6236, 1.6216, 1.6196, 1.6177, 1.6158, 1.6138, 1.6119, 
                                1.6101, 1.6082, 1.6063, 1.6045, 1.6026, 1.6008, 1.599, 1.5972, 
                                1.5955, 1.5937, 1.5919, 1.5902, 1.5885, 1.5867, 1.585, 1.5833, 
                                1.5817, 1.58, 1.5783, 1.5767, 1.575, 1.5734, 1.5718, 1.5702, 
                                1.5686, 1.567, 1.5654, 1.5638, 1.5622, 1.5607, 1.5591, 1.5576, 
                                1.5561, 1.5546, 1.5531, 1.5515, 1.5501, 1.5486, 1.5471, 1.5456, 
                                1.5442, 1.5427, 1.5413, 1.5398, 1.5384, 1.537, 1.5355, 1.5341, 
                                1.5327, 1.5313, 1.5299, 1.5286, 1.5272, 1.5258, 1.5245, 1.5231, 
                                1.5218, 1.5204, 1.5191, 1.5177, 1.5164, 1.5151, 1.5138, 1.5125, 
                                1.5112, 1.5099, 1.5086, 1.5073, 1.506, 1.5048, 1.5035, 1.5022, 
                                1.501, 1.4997, 1.4985, 1.4972, 1.496, 1.4948, 1.4935, 1.4923, 
                                1.4911, 1.4899, 1.4887, 1.4875, 1.4863, 1.4851, 1.4839, 1.4827,
                                1.4815, 1.4804, 1.4792, 1.478, 1.4769, 1.4757, 1.4746, 1.4734, 
                                1.4723, 1.4711, 1.47, 1.4689, 1.4677, 1.4666, 1.4655, 1.4644, 
                                1.4633, 1.4621, 1.461, 1.4599, 1.4588, 1.4577, 1.4567, 1.4556, 
                                1.4545, 1.4534, 1.4523, 1.4512, 1.4502, 1.4491, 1.448, 1.447, 
                                1.4459, 1.4449, 1.4438, 1.4428, 1.4417, 1.4407, 1.4397, 1.4386, 
                                1.4376, 1.4366, 1.4355, 1.4345, 1.4335, 1.4325, 1.4315, 1.4305, 
                                1.4295, 1.4284, 1.4274, 1.4264, 1.4254, 1.4245, 1.4235, 1.4225, 
                                1.4215, 1.4205};

NumericVector Watson_asymp_q = {0.3851, 0.35, 0.3295, 0.3149, 0.3036, 0.2943, 0.2865, 0.2798, 
                                0.2738, 0.2685, 0.2636, 0.2592, 0.2552, 0.2514, 0.2479, 0.2447, 
                                0.2416, 0.2387, 0.2359, 0.2334, 0.2309, 0.2285, 0.2263, 0.2241, 
                                0.222, 0.2201, 0.2181, 0.2163, 0.2145, 0.2128, 0.2111, 0.2095, 
                                0.208, 0.2065, 0.205, 0.2036, 0.2022, 0.2008, 0.1995, 0.1982, 
                                0.197, 0.1958, 0.1946, 0.1934, 0.1923, 0.1912, 0.1901, 0.189, 
                                0.188, 0.1869, 0.1859, 0.1849, 0.184, 0.183, 0.1821, 0.1812, 
                                0.1803, 0.1794, 0.1785, 0.1777, 0.1769, 0.176, 0.1752, 0.1744, 
                                0.1736, 0.1729, 0.1721, 0.1714, 0.1706, 0.1699, 0.1692, 0.1685, 
                                0.1678, 0.1671, 0.1664, 0.1657, 0.1651, 0.1644, 0.1638, 0.1631, 
                                0.1625, 0.1619, 0.1613, 0.1606, 0.16, 0.1595, 0.1589, 0.1583, 
                                0.1577, 0.1571, 0.1566, 0.156, 0.1555, 0.1549, 0.1544, 0.1539, 
                                0.1534, 0.1528, 0.1523, 0.1518, 0.1513, 0.1508, 0.1503, 0.1498, 
                                0.1493, 0.1489, 0.1484, 0.1479, 0.1474, 0.147, 0.1465, 0.1461, 
                                0.1456, 0.1452, 0.1447, 0.1443, 0.1439, 0.1434, 0.143, 0.1426, 
                                0.1421, 0.1417, 0.1413, 0.1409, 0.1405, 0.1401, 0.1397, 0.1393, 
                                0.1389, 0.1385, 0.1381, 0.1377, 0.1374, 0.137, 0.1366, 0.1362, 
                                0.1359, 0.1355, 0.1351, 0.1348, 0.1344, 0.134, 0.1337, 0.1333, 
                                0.133, 0.1326, 0.1323, 0.1319, 0.1316, 0.1313, 0.1309, 0.1306, 
                                0.1302, 0.1299, 0.1296, 0.1293, 0.1289, 0.1286, 0.1283, 0.128, 
                                0.1277, 0.1273, 0.127, 0.1267, 0.1264, 0.1261, 0.1258, 0.1255, 
                                0.1252, 0.1249, 0.1246, 0.1243, 0.124, 0.1237, 0.1234, 0.1231, 
                                0.1229, 0.1226, 0.1223, 0.122, 0.1217, 0.1214, 0.1212, 0.1209, 
                                0.1206, 0.1203, 0.1201, 0.1198, 0.1195, 0.1193, 0.119, 0.1187, 
                                0.1185, 0.1182, 0.1179, 0.1177, 0.1174, 0.1172, 0.1169, 0.1166,
                                0.1164, 0.1161, 0.1159, 0.1156, 0.1154, 0.1151, 0.1149, 0.1147, 
                                0.1144, 0.1142, 0.1139, 0.1137, 0.1134, 0.1132, 0.113, 0.1127, 
                                0.1125, 0.1123, 0.112, 0.1118, 0.1116, 0.1113, 0.1111, 0.1109, 
                                0.1107, 0.1104, 0.1102, 0.11, 0.1098, 0.1095, 0.1093, 0.1091, 
                                0.1089, 0.1087, 0.1084, 0.1082, 0.108, 0.1078, 0.1076, 0.1074,
                                0.1072, 0.107, 0.1067, 0.1065, 0.1063, 0.1061, 0.1059, 0.1057,
                                0.1055, 0.1053};

//                      Newton - Raphson                     //

//[[Rcpp::export]]
double f_supremum(double alpha, double T_n, int n, 
                  double beta_n_1_2, double beta_n_alpha_1_2, double beta_nalpha_1_2, 
                  double T_inf2, double T_inf1, double alpha2, double alpha1){
  
  double m = (T_inf2 - T_inf1)/(alpha2 - alpha1);
  double h = (T_n - T_inf2 + m*alpha2 + beta_n_1_2*T_n/sqrt(n)) + (beta_n_alpha_1_2*T_n/n + beta_nalpha_1_2*T_n/sqrt(n))/sqrt(alpha) - m*alpha;
  
  return(h);
  
}

//[[Rcpp::export]]
double f_quadratic(double alpha, double T_n, int n, 
                   double beta_n, double beta_n_alpha_1_2, double beta_nalpha, 
                   double T_inf2, double T_inf1, double alpha2, double alpha1){
  
  double m = (T_inf2 - T_inf1)/(alpha2 - alpha1);
  double h = (T_n - T_inf2 + m*alpha2 + beta_n*T_n/n) + (beta_n_alpha_1_2*T_n/n)/sqrt(alpha) + (beta_nalpha*T_n/n)/alpha - m*alpha;
  
  return(h);
  
}

//[[Rcpp::export]]
double de_supremum(double alpha, double T_n, int n, 
                   double beta_n_1_2, double beta_n_alpha_1_2, double beta_nalpha_1_2, 
                   double T_inf2, double T_inf1, double alpha2, double alpha1){
  
  double m = (T_inf2 - T_inf1)/(alpha2 - alpha1);
  double der = -1/2*(beta_n_alpha_1_2*T_n/n + beta_nalpha_1_2*T_n/sqrt(n))/sqrt(alpha*alpha*alpha) - m;
  
  return(der);
  
}

//[[Rcpp::export]]
double de_quadratic(double alpha, double T_n, int n, 
                    double beta_n, double beta_n_alpha_1_2, double beta_nalpha, 
                    double T_inf2, double T_inf1, double alpha2, double alpha1){
  
  double m = (T_inf2 - T_inf1)/(alpha2 - alpha1);
  double der = -beta_nalpha/(alpha*alpha) -1/2*(beta_n_alpha_1_2*T_n/n)/sqrt(alpha*alpha*alpha) - m;
  
  return(der);
  
}

//[[Rcpp::export]]
double newton_raphson_supremum(double T_n, int n, 
                               double beta_n_1_2, double beta_n_alpha_1_2, double beta_nalpha_1_2, 
                               double T_inf2, double T_inf1, double alpha2, double alpha1, double thr = 1e-7){
  
  auto fobj = [T_n, n, beta_n_1_2, beta_n_alpha_1_2, beta_nalpha_1_2, T_inf2, T_inf1, alpha2, alpha1](double alpha){
    return f_supremum(alpha, T_n, n, beta_n_1_2, beta_n_alpha_1_2, beta_nalpha_1_2, T_inf2, T_inf1, alpha2, alpha1);
  };
  auto derobj = [T_n, n, beta_n_1_2, beta_n_alpha_1_2, beta_nalpha_1_2, T_inf2, T_inf1, alpha2, alpha1](double alpha){
    return de_supremum(alpha, T_n, n, beta_n_1_2, beta_n_alpha_1_2, beta_nalpha_1_2, T_inf2, T_inf1, alpha2, alpha1);
  };
  
  double z;
  double a = alpha1 + (alpha2-alpha1)/2;
  int e = 0;
  do{
    e++;
    z = a - (fobj(a)/derobj(a));
    a = z;
  }while((abs(fobj(z))>thr) && (e < 7));
  
  if(a < 0){
    a = 0;
  }
  
  return(a);
  
}

//[[Rcpp::export]]
double newton_raphson_quadratic(double T_n, int n, 
                                double beta_n, double beta_n_alpha_1_2, double beta_nalpha, 
                                double T_inf2, double T_inf1, double alpha2, double alpha1, double thr = 1e-7){
  
  auto fobj = [T_n, n, beta_n, beta_n_alpha_1_2, beta_nalpha, T_inf2, T_inf1, alpha2, alpha1](double alpha){
    return f_quadratic(alpha, T_n, n, beta_n, beta_n_alpha_1_2, beta_nalpha, T_inf2, T_inf1, alpha2, alpha1);
  };
  auto derobj = [T_n, n, beta_n, beta_n_alpha_1_2, beta_nalpha, T_inf2, T_inf1, alpha2, alpha1](double alpha){
    return de_quadratic(alpha, T_n, n, beta_n, beta_n_alpha_1_2, beta_nalpha, T_inf2, T_inf1, alpha2, alpha1);
  };
  
  double z;
  double a = alpha1 + (alpha2-alpha1)/2;
  int e = 0;
  do{
    e++;
    z = a - (fobj(a)/derobj(a));
    a = z;
  }while((abs(fobj(z))>thr) && (e < 7));
  
  if(a < 0){
    a = 0;
  }
  
  return(a);
  
}

//                                                           //
//         Exact distribution of circular statistics         //
//                                                           //

//[[Rcpp::export]]
double p_cir_stat_Kuiper(double T_n, int n, bool KS = false){
  int m = alpha_grid.size();
  int i;
  double alpha;
  double T_mod;
  NumericVector T_inf;
  if(KS){
    T_inf = KS_asymp_q;
  }else{
    T_inf = Kuiper_asymp_q;
  }
  
  for(i = 0; i < m; i++){
    alpha = alpha_grid[i];
    T_mod = cir_stat_Kuiper_mod(T_n, n, alpha, KS);
    
    if(T_mod > T_inf[i]){
      
      if(i > 0){
        if(KS){
          alpha = newton_raphson_supremum(T_n, n, 0.1575, 0.0192, -0.0051, 
                                          T_inf[i-1], T_inf[i], alpha_grid[i-1], alpha);
        }else{
          alpha = newton_raphson_supremum(T_n, n, 0.2330, 0.0276, -0.0068, 
                                          T_inf[i-1], T_inf[i], alpha_grid[i-1], alpha);
        }
      }else{
        if(KS){
          alpha = newton_raphson_supremum(T_n, n, 0.1575, 0.0192, -0.0051, 
                                          T_inf[i], T_inf[i+1], alpha, alpha_grid[i+1]);
        }else{
          alpha = newton_raphson_supremum(T_n, n, 0.2330, 0.0276, -0.0068, 
                                          T_inf[i], T_inf[i+1], alpha, alpha_grid[i+1]);
        }
      }
      return(alpha);
    }
  }
  return(NumericVector::get_na());
}

//[[Rcpp::export]]
double p_cir_stat_Watson(double T_n, int n, bool CvM = false){
  int m = alpha_grid.size();
  int i;
  double alpha;
  double T_mod;
  NumericVector T_inf;
  if(CvM){
    T_inf = CvM_asymp_q;
  }else{
    T_inf = Watson_asymp_q;
  }
  
  for(i = 0; i < m; i++){
    alpha = alpha_grid[i];
    T_mod = cir_stat_Watson_mod(T_n, n, alpha, CvM);
    
    if(T_mod > T_inf[i]){
      
      if(i > 0){
        if(CvM){
          alpha = newton_raphson_quadratic(T_n, n, -0.1651, 0.0749, -0.0014, 
                                           T_inf[i-1], T_inf[i], alpha_grid[i-1], alpha);
        }else{
          alpha = newton_raphson_quadratic(T_n, n, -0.1505, 0.0917, -0.0018, 
                                           T_inf[i-1], T_inf[i], alpha_grid[i-1], alpha);
        }
      }else{
        if(CvM){
          alpha = newton_raphson_quadratic(T_n, n, -0.1651, 0.0749, -0.0014, 
                                           T_inf[i], T_inf[i+1], alpha, alpha_grid[i+1]);
        }else{
          alpha = newton_raphson_quadratic(T_n, n, -0.1505, 0.0917, -0.0018, 
                                           T_inf[i], T_inf[i+1], alpha, alpha_grid[i+1]);
        }
      }
      
      return(alpha);
    }
  }
  return(NumericVector::get_na());
}

//[[Rcpp::export]]
double p_cir_stat_AD(double T_n, int n){
  int m = alpha_grid.size();
  int i;
  double alpha;
  double T_mod;
  NumericVector T_inf = AD_asymp_q;
  
  for(i = 0; i < m; i++){
    alpha = alpha_grid[i];
    T_mod = cir_stat_AD_mod(T_n, n, alpha);
    
    if(T_mod > T_inf[i]){
      
      if(i > 0){
        alpha = newton_raphson_quadratic(T_n, n, 0.0360, -0.0234, 0.0006, 
                                         T_inf[i-1], T_inf[i], alpha_grid[i-1], alpha);
      }else{
        alpha = newton_raphson_quadratic(T_n, n, 0.0360, -0.0234, 0.0006, 
                                         T_inf[i], T_inf[i+1], alpha, alpha_grid[i+1]);
      }
      return(alpha);
    }
  }
  return(NumericVector::get_na());
}